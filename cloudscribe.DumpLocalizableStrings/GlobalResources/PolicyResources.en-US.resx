<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Allowed Values Csv (leave blank if any value is allowed)" xml:space="preserve">
    <value>Allowed Values Csv (leave blank if any value is allowed)</value>
  </data>
  <data name="Claim Name" xml:space="preserve">
    <value>Claim Name</value>
  </data>
  <data name="Save" xml:space="preserve">
    <value>Save</value>
  </data>
  <data name="Delete" xml:space="preserve">
    <value>Delete</value>
  </data>
  <data name="Confirm Delete" xml:space="preserve">
    <value>Confirm Delete</value>
  </data>
  <data name="Close" xml:space="preserve">
    <value>Close</value>
  </data>
  <data name="Cancel" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="Are you sure you want to delete the claim requirement for {0}? You cannot undo this action." xml:space="preserve">
    <value>Are you sure you want to delete the claim requirement for {0}? You cannot undo this action.</value>
  </data>
  <data name="Require Authenticated User" xml:space="preserve">
    <value>Require Authenticated User</value>
  </data>
  <data name="Allowed Roles (comma separated values)" xml:space="preserve">
    <value>Allowed Roles (comma separated values)</value>
  </data>
  <data name="Select Roles" xml:space="preserve">
    <value>Select Roles</value>
  </data>
  <data name="Authentication Schemes (comma separated values, leave blank for all)" xml:space="preserve">
    <value>Authentication Schemes (comma separated values, leave blank for all)</value>
  </data>
  <data name="Required User Name" xml:space="preserve">
    <value>Required User Name</value>
  </data>
  <data name="Notes" xml:space="preserve">
    <value>Notes</value>
  </data>
  <data name="Note that roles use OR logic, a user only has to be in any one of the allowed roles to meet the policy requirement." xml:space="preserve">
    <value>Note that roles use OR logic, a user only has to be in any one of the allowed roles to meet the policy requirement.</value>
  </data>
  <data name="Working..." xml:space="preserve">
    <value>Working...</value>
  </data>
  <data name="Back to List" xml:space="preserve">
    <value>Back to List</value>
  </data>
  <data name="Edit Policy - {0}" xml:space="preserve">
    <value>Edit Policy - {0}</value>
  </data>
  <data name="Are you sure you want to delete the policy {0}? You cannot undo this action. If the policy name is in use then it will be recreated automatically if automatic policy creation is enabled." xml:space="preserve">
    <value>Are you sure you want to delete the policy {0}? You cannot undo this action. If the policy name is in use then it will be recreated automatically if automatic policy creation is enabled.</value>
  </data>
  <data name="This policy has no requirements therefore it allows anonymous access. If this is not intended please add one or more requirements." xml:space="preserve">
    <value>This policy has no requirements therefore it allows anonymous access. If this is not intended please add one or more requirements.</value>
  </data>
  <data name="Note that claims use AND logic, if you require claims, the user must have all the required claims to meet the policy requirement." xml:space="preserve">
    <value>Note that claims use AND logic, if you require claims, the user must have all the required claims to meet the policy requirement.</value>
  </data>
  <data name="Only {0} is allowed" xml:space="preserve">
    <value>Only {0} is allowed</value>
  </data>
  <data name="Allowed roles: {0}" xml:space="preserve">
    <value>Allowed roles: {0}</value>
  </data>
  <data name=" Has Claim Requirements" xml:space="preserve">
    <value> Has Claim Requirements</value>
  </data>
  <data name="Requires authenticated user" xml:space="preserve">
    <value>Requires authenticated user</value>
  </data>
  <data name="Allows anonymous access" xml:space="preserve">
    <value>Allows anonymous access</value>
  </data>
  <data name="Authorization Policies" xml:space="preserve">
    <value>Authorization Policies</value>
  </data>
  <data name="Name" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="Requirements" xml:space="preserve">
    <value>Requirements</value>
  </data>
  <data name="First Page" xml:space="preserve">
    <value>First Page</value>
  </data>
  <data name="Last Page" xml:space="preserve">
    <value>Last Page</value>
  </data>
  <data name="Previous page" xml:space="preserve">
    <value>Previous page</value>
  </data>
  <data name="Next page" xml:space="preserve">
    <value>Next page</value>
  </data>
  <data name="Create New" xml:space="preserve">
    <value>Create New</value>
  </data>
  <data name="Search" xml:space="preserve">
    <value>Search</value>
  </data>
  <data name="Edit" xml:space="preserve">
    <value>Edit</value>
  </data>
  <data name="New Claim Requirement" xml:space="preserve">
    <value>New Claim Requirement</value>
  </data>
  <data name="Add Claim Requirement" xml:space="preserve">
    <value>Add Claim Requirement</value>
  </data>
  <data name="New Policy" xml:space="preserve">
    <value>New Policy</value>
  </data>
</root>